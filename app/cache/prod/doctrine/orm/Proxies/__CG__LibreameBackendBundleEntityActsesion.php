<?php

namespace Proxies\__CG__\Libreame\BackendBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Actsesion extends \Libreame\BackendBundle\Entity\Actsesion implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Libreame\\BackendBundle\\Entity\\Actsesion' . "\0" . 'inactsesion', '' . "\0" . 'Libreame\\BackendBundle\\Entity\\Actsesion' . "\0" . 'inactaccion', '' . "\0" . 'Libreame\\BackendBundle\\Entity\\Actsesion' . "\0" . 'txactmensaje', '' . "\0" . 'Libreame\\BackendBundle\\Entity\\Actsesion' . "\0" . 'feactfecha', '' . "\0" . 'Libreame\\BackendBundle\\Entity\\Actsesion' . "\0" . 'inactfinalizada', '' . "\0" . 'Libreame\\BackendBundle\\Entity\\Actsesion' . "\0" . 'actsesionInsesion');
        }

        return array('__isInitialized__', '' . "\0" . 'Libreame\\BackendBundle\\Entity\\Actsesion' . "\0" . 'inactsesion', '' . "\0" . 'Libreame\\BackendBundle\\Entity\\Actsesion' . "\0" . 'inactaccion', '' . "\0" . 'Libreame\\BackendBundle\\Entity\\Actsesion' . "\0" . 'txactmensaje', '' . "\0" . 'Libreame\\BackendBundle\\Entity\\Actsesion' . "\0" . 'feactfecha', '' . "\0" . 'Libreame\\BackendBundle\\Entity\\Actsesion' . "\0" . 'inactfinalizada', '' . "\0" . 'Libreame\\BackendBundle\\Entity\\Actsesion' . "\0" . 'actsesionInsesion');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Actsesion $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getinactsesion()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getinactsesion();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getinactsesion', array());

        return parent::getinactsesion();
    }

    /**
     * {@inheritDoc}
     */
    public function getinactaccion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getinactaccion', array());

        return parent::getinactaccion();
    }

    /**
     * {@inheritDoc}
     */
    public function gettxactmensaje()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'gettxactmensaje', array());

        return parent::gettxactmensaje();
    }

    /**
     * {@inheritDoc}
     */
    public function getfeactfecha()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getfeactfecha', array());

        return parent::getfeactfecha();
    }

    /**
     * {@inheritDoc}
     */
    public function getinactfinalizada()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getinactfinalizada', array());

        return parent::getinactfinalizada();
    }

    /**
     * {@inheritDoc}
     */
    public function getactsesionInsesion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getactsesionInsesion', array());

        return parent::getactsesionInsesion();
    }

    /**
     * {@inheritDoc}
     */
    public function setinactsesion($inactsesion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setinactsesion', array($inactsesion));

        return parent::setinactsesion($inactsesion);
    }

    /**
     * {@inheritDoc}
     */
    public function setinactaccion($inactaccion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setinactaccion', array($inactaccion));

        return parent::setinactaccion($inactaccion);
    }

    /**
     * {@inheritDoc}
     */
    public function settxactmensaje($txactmensaje)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'settxactmensaje', array($txactmensaje));

        return parent::settxactmensaje($txactmensaje);
    }

    /**
     * {@inheritDoc}
     */
    public function setfeactfecha($feactfecha)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setfeactfecha', array($feactfecha));

        return parent::setfeactfecha($feactfecha);
    }

    /**
     * {@inheritDoc}
     */
    public function setinactfinalizada($inactfinalizada)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setinactfinalizada', array($inactfinalizada));

        return parent::setinactfinalizada($inactfinalizada);
    }

    /**
     * {@inheritDoc}
     */
    public function setactsesionInsesion($actsesionInsesion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setactsesionInsesion', array($actsesionInsesion));

        return parent::setactsesionInsesion($actsesionInsesion);
    }

}
